[{"/home/david/Desktop/SponsorMe/sponsor/src/index.js":"1","/home/david/Desktop/SponsorMe/sponsor/src/App.js":"2","/home/david/Desktop/SponsorMe/sponsor/src/reportWebVitals.js":"3","/home/david/Desktop/SponsorMe/sponsor/src/About.js":"4","/home/david/Desktop/SponsorMe/sponsor/src/AppNavbar.js":"5","/home/david/Desktop/SponsorMe/sponsor/src/Footer.js":"6","/home/david/Desktop/SponsorMe/sponsor/src/PageError.js":"7","/home/david/Desktop/SponsorMe/sponsor/src/Home.js":"8","/home/david/Desktop/SponsorMe/sponsor/src/contracts/build/index.main.mjs":"9"},{"size":547,"mtime":1642088988560,"results":"10","hashOfConfig":"11"},{"size":587,"mtime":1642088988236,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1642088988568,"results":"13","hashOfConfig":"11"},{"size":2575,"mtime":1642088988212,"results":"14","hashOfConfig":"11"},{"size":1004,"mtime":1642088988300,"results":"15","hashOfConfig":"11"},{"size":253,"mtime":1642088988304,"results":"16","hashOfConfig":"11"},{"size":870,"mtime":1642088988304,"results":"17","hashOfConfig":"11"},{"size":17433,"mtime":1642088988304,"results":"18","hashOfConfig":"11"},{"size":205539,"mtime":1642088988472,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"g1s4ux",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/david/Desktop/SponsorMe/sponsor/src/index.js",[],"/home/david/Desktop/SponsorMe/sponsor/src/App.js",[],"/home/david/Desktop/SponsorMe/sponsor/src/reportWebVitals.js",[],"/home/david/Desktop/SponsorMe/sponsor/src/About.js",[],"/home/david/Desktop/SponsorMe/sponsor/src/AppNavbar.js",[],"/home/david/Desktop/SponsorMe/sponsor/src/Footer.js",[],"/home/david/Desktop/SponsorMe/sponsor/src/PageError.js",[],"/home/david/Desktop/SponsorMe/sponsor/src/Home.js",["39","40","41","42","43","44","45","46","47","48","49","50","51"],"import React, { useEffect, useState } from \"react\";\nimport * as backend from \"./contracts/build/index.main.mjs\";\nimport { loadStdlib } from \"@reach-sh/stdlib\";\nimport MyAlgoConnect from \"@reach-sh/stdlib/ALGO_MyAlgoConnect\";\n// import ALGO_AlgoSigner from \"@reach-sh/stdlib/ALGO_AlgoSigner\"\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\nimport Image from \"react-bootstrap/Image\";\nimport Error from \"./assets/winner.png\";\n\n\nconst reach = loadStdlib(\"ALGO\");\nreach.setWalletFallback(\n  reach.walletFallback({\n    providerEnv: \"TestNet\",\n    MyAlgoConnect,\n  })\n);\n\n\nconst { standardUnit } = reach;\nconsole.log(standardUnit, \"starter\", reach);\n\nconst Home = () => {\n  const [balProj, setBalProj] = useState();\n  const [sponsorBal, setSponsorBal] = useState();\n  const [show, setShow] = useState(false);\n  const [confirm, setConfirm] = useState(false);\n  const [name, setName] = useState(\"\");\n  const [amount, setAmount] = useState();\n  const [share, setShare] = useState();\n  const [description, setDescription] = useState(\"\");\n  const [contractInfo, setContractInfo] = useState(\"\");\n  const [view, setView] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [contractId, setContractId] = useState(\"\");\n  const [projectDetails, setProjectDetails] = useState(\"\");\n  const [sponsor, setSponsor] = useState(false);\n\n  let ctcPO = null;\n  let ctcS = null;\n  let accPO = null;\n  let accS = null;\n  // global variables\n  let suStr = standardUnit;\n  let toAU;\n  let toSU;\n  let iBalance;\n\n  useEffect(() => {\n    initials();\n  }, []);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const handleSubmit = () => {\n    setErrorMessage(\"\");\n    if (!name) {\n      setErrorMessage(\"Please enter project name\");\n      return;\n    }\n    if (!description) {\n      setErrorMessage(\"Please enter project deescription\");\n      return;\n    }\n    if (!amount) {\n      setErrorMessage(\"Please enter project funding target\");\n      return;\n    }\n    if (!share) {\n      setErrorMessage(\"Please enter equity share percentage\");\n      return;\n    }\n    console.log(name, description, amount, share);\n    //deploy with payload\n    deployProject();\n    // handleClose();\n  };\n\n  const initials = async () => {\n    suStr = standardUnit;\n    toAU = su => reach.parseCurrency(su);\n    toSU = au => reach.formatCurrency(au, 4);\n    iBalance = toAU(1000);\n\n    const acc = await reach.getDefaultAccount();\n    const fundIt = await reach.parseCurrency(1000);\n    showBalance(acc);\n    // const balAtomic = await reach.balanceOf(acc);\n    // const bal = reach.formatCurrency(balAtomic, 4);\n    // console.log(\"trying to get bal: \", bal);\n    try {\n      const faucet = await reach.getFaucet();\n      setView(\"FundAccount\");\n    } catch (e) {\n      setView(\"\");\n    }\n  };\n  const showBalance = async acc => {\n    const balAtomic = await reach.balanceOf(acc);\n    const bal = reach.formatCurrency(balAtomic, 4);\n    setBalProj(bal);\n    // console.log(acc);\n    // console.log(\n    //   `Your balance is ${toSU(await reach.balanceOf(acc))} ${suStr}.`\n    // );\n    // return toSU(await reach.balanceOf(acc));\n  };\n  const confirmSponsor = async () => {\n\n  }\n\n  const commonInteract = role => ({\n    reportPayment: payment =>\n      console.log(\n        `${role === \"sponsor\" ? \"You\" : \"The sponsor\"} paid ${toSU(\n          payment\n        )} ${suStr} to the contract.`\n        // Todo: Add a useState to show payment\n      ),\n    reportTransfer: payment =>\n      console.log(\n        `The contract paid ${toSU(payment)} ${suStr} to ${\n          role === \"projectOwner\" ? \"you\" : \"the Project Owner\"\n        }.` // Todo: Add a useState to show transfer of payment\n      ),\n    reportExit: () => {\n      console.log(\"Exiting contract\");\n    },\n    reportCancellation: () => {\n      console.log(\n        `${role === \"sponsor\" ? \"You\" : \"The Sponsor\"} cancelled sponsorship.`\n      ); // Todo: Add a useState to show  cancelation of payment\n    },\n    reportTokenMinted: minted => {\n      console.log(`Token was minted ${minted}`);\n      // Todo: Add a useState to show toke minted\n    },\n    didTransfer: (did, _amt) => {\n      if (did) {\n        let amt = _amt;\n        console.log(`Received transfer of ${toSU(amt)}`);\n        // Todo: Add a useState to show amount of token transfered\n      }\n      // console.log(`Token transfered ${amt}`);\n    },\n    programEnded: () => {\n      console.log(\"Program ended\");\n      setView(\"done\"); // Just as is being done here\n    },\n    showToken: (token) => {\n      console.log(`Token minted: ${token}`);\n      // Todo: Add a useState to show token minted.\n    },\n  });\n\n  const deployProject = async () => {\n    const projectOwnerInteract = {\n      ...commonInteract(\"projectOwner\"),\n      projectInfo: {\n        projectName: name,\n        projectDetails: description,\n        fundraisingGoal: amount,\n        contractDuration: 200,\n        share: share,\n      },\n      reportReady: async () => {\n        const info = JSON.stringify(await ctc.getInfo());\n        console.log(`Contract info: ${info}`);\n        setContractInfo(info);\n      },\n      getParams: () => ({\n        name: `Sponsor`,\n        symbol: `GIL`,\n        url: `https://tinyurl.com/4nd2faer`,\n        metadata: `It's shiny!`,\n        supply: reach.parseCurrency(1000),\n        amt: reach.parseCurrency(amount),\n      }),\n      // reportReady: async () => { console.log(`Contract info: ${JSON.stringify(await ctc.getInfo())}`); }\n    };\n    setProjectDetails(projectOwnerInteract.projectInfo);\n\n\n    const acc = await reach.getDefaultAccount();\n    if (await reach.canFundFromFaucet()) {\n      reach.fundFromFaucet(acc, 100000000);\n    }\n    const ctc = acc.contract(backend);\n    await backend.ProjectOwner(ctc, projectOwnerInteract);\n    await showBalance(acc);\n    setView(\"pending\");\n  };\n\n  const attachProject = async () => {\n    const sponsorInteract = {\n      ...commonInteract(\"sponsor\"),\n      // sponsor: confirm,\n      // Todo: check how to set this to a state\n      sponsor: async (projectInfo) => {\n        // Todo: Add a useState to show project info.\n        console.log(projectInfo);\n        const sponsor = { contribute: true, amt: projectInfo.amount }; // how to get the amount from the project info\n        // const confirm = await confirmSponsor(); // set a view here to show a dialogue.\n        // if (confirm) {\n        //   sponsor.contribute = confirm;\n        // } \n        return sponsor;\n      },\n    };\n\n    const acc = await reach.getDefaultAccount();\n    if (await reach.canFundFromFaucet()) {\n      reach.fundFromFaucet(acc, 100000000);\n    }\n    const ctc = acc.contract(backend, Number(contractInfo));\n\n    await backend.Sponsor(ctc, sponsorInteract);\n    // await showBalance(\"seller\", sellerAcc);\n\n    // await ctc.p.Sponsor(sponsorInteract);\n    await showBalance(acc);\n  };\n\n  const getSponsorship = () => {\n    setView(\"deploy\");\n  };\n\n  const beASponsor = () => {\n    setView(\"attach\");\n  };\n\n  const handleSponsor = () => {\n    // {projectDetails};\n    handleShow();\n  };\n\n  const handleConfirm = () => {\n    setConfirm(true);\n    handleClose();\n    attachProject();\n  };\n\n  if (view === \"pending\") {\n    <>\n      <h3>Contract {contractInfo} is pending</h3>\n    </>;\n  }\n  if (view === \"deploy\") {\n    return (\n      <>\n        <div>\n          <Container className=\"h-100\">\n            <Row>\n              <Col xs={2}></Col>\n              <Col xs={8}>\n                <h6>Please fill the form below to request sponsorship</h6>\n\n                <Form>\n                  <Form.Group\n                    className=\"mb-3\"\n                    controlId=\"exampleForm.ControlInput1\"\n                  >\n                    <Form.Label>Wallet Balance</Form.Label>\n                    <Form.Control\n                      type=\"email\"\n                      placeholder=\"1000\"\n                      defaultValue={balProj}\n                      disabled={true}\n                    />\n                  </Form.Group>\n                  <Form.Group\n                    className=\"mb-3\"\n                    controlId=\"exampleForm.ControlInput1\"\n                  >\n                    <Form.Label>Project Name</Form.Label>\n                    <Form.Control\n                      type=\"email\"\n                      placeholder=\"NFT Market Place\"\n                      onChange={e => setName(e.target.value)}\n                    />\n                  </Form.Group>\n                  <Form.Group\n                    className=\"mb-3\"\n                    controlId=\"exampleForm.ControlInput1\"\n                  >\n                    <Form.Label>Funding Amount</Form.Label>\n                    <Form.Control\n                      type=\"number\"\n                      placeholder=\"400\"\n                      onChange={e => setAmount(e.target.value)}\n                    />\n                  </Form.Group>\n                  <Form.Group\n                    className=\"mb-3\"\n                    controlId=\"exampleForm.ControlInput1\"\n                  >\n                    <Form.Label>Equity Share</Form.Label>\n                    <Form.Control\n                      type=\"number\"\n                      placeholder=\"40\"\n                      onChange={e => setShare(e.target.value)}\n                    />\n                  </Form.Group>\n                  <Form.Group\n                    className=\"mb-3\"\n                    controlId=\"exampleForm.ControlTextarea1\"\n                  >\n                    <Form.Label>Project Description</Form.Label>\n                    <Form.Control\n                      as=\"textarea\"\n                      rows={3}\n                      onChange={e => setDescription(e.target.value)}\n                    />\n                  </Form.Group>\n                </Form>\n                <Row>\n                  <Button variant=\"danger\" onClick={() => setView(\"\")}>\n                    Cancel\n                  </Button>\n                  <Button variant=\"primary\" onClick={handleSubmit}>\n                    Submit\n                  </Button>\n                </Row>\n                <div>\n                  <p>{errorMessage}</p>\n                </div>\n              </Col>\n              <Col xs={2}></Col>\n            </Row>\n            {contractInfo ? (\n              <h6>\n                Your contract with ID: {contractInfo ? contractInfo : \"\"} has\n                been deployed and await response from a sponsor\n              </h6> // Todo: do the same here for as in contractInfo, but for details of everything - like a log or something, check that \"market tutorial\"\n            ) : (\n              <></>\n            )}\n          </Container>\n        </div>\n      </>\n    );\n  }\n\n  if (view === \"attach\") {\n    return (\n      <>\n        <div>\n          <Container className=\"h-100\">\n            <Row>\n              <Col xs={4}></Col>\n              <Col xs={4}>\n                <div className=\"home--attach\">\n                  <h5>Available Balance: {balProj}</h5>\n                  <Row>\n                    <Col>\n                      <Form>\n                        <Form.Group\n                          className=\"mb-3\"\n                          controlId=\"exampleForm.ControlInput1\"\n                        >\n                          <Form.Label>Contract ID: </Form.Label>\n                          <Form.Control\n                            type=\"enter contract id\"\n                            placeholder=\"100\"\n                            onChange={e => setContractId(e.target.value)}\n                          />\n                        </Form.Group>\n                      </Form>\n                      // Todo: output the project details here and a button where the sponsor accepts to pay.\n                      // Or use the modal below:\n                      <p>\n                        {confirm\n                          ? `This project with contract ID: ${contractId} is sponsored by you, congratulations!`\n                          : \"\"}\n                      </p>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Button variant=\"danger\" onClick={() => setView(\"\")}>\n                      Go Back\n                    </Button>\n                    <Button variant=\"primary\" onClick={() => {\n                      setSponsor(true)\n                      handleSponsor()}}>\n                      Sponsor\n                    </Button>\n                  </Row>\n                </div>\n              </Col>\n              <Col xs={4}></Col>\n            </Row>\n          </Container>\n        </div>\n        <Modal show={show} onHide={handleClose} animation={false}>\n          <Modal.Header closeButton>\n            <Modal.Title> Confirm </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <p>Are you sure you want to sponsor this project?</p>\n            <p>Project Details: {projectDetails}</p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"danger\" onClick={handleClose}>\n              No\n            </Button>\n            <Button variant=\"primary\" onClick={handleConfirm}>\n              Yes\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n  return (\n    <>\n      <Modal show={show} onHide={handleClose} animation={false}>\n        <Modal.Header closeButton>\n          <Modal.Title> Please fill the form below</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form>\n            <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\n              <Form.Label>Wallet Address</Form.Label>\n              <Form.Control type=\"email\" placeholder=\"NFT Market Place\" />\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\n              <Form.Label>Project Name</Form.Label>\n              <Form.Control\n                type=\"email\"\n                placeholder=\"NFT Market Place\"\n                onChange={e => setName(e.target.value)}\n              />\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\n              <Form.Label>Funding Amount</Form.Label>\n              <Form.Control\n                type=\"number\"\n                placeholder=\"400\"\n                onChange={e => setAmount(e.target.value)}\n              />\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\n              <Form.Label>Equity Share</Form.Label>\n              <Form.Control\n                type=\"number\"\n                placeholder=\"40\"\n                onChange={e => setShare(e.target.value)}\n              />\n            </Form.Group>\n            <Form.Group\n              className=\"mb-3\"\n              controlId=\"exampleForm.ControlTextarea1\"\n            >\n              <Form.Label>Project Description</Form.Label>\n              <Form.Control\n                as=\"textarea\"\n                rows={3}\n                onChange={e => setDescription(e.target.value)}\n              />\n            </Form.Group>\n          </Form>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"danger\" onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button variant=\"primary\" onClick={handleSubmit}>\n            Submit\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n      <div className=\"home--wrapper\">\n        <Row>\n          <Col>\n            <div className=\"home--jumbo\">\n              <h1>Welcome to Sponsor Me</h1>\n              <div className=\"home--action\">\n                <h5 className=\"home--action\">\n                  What will you like to do today?\n                </h5>\n                <div>\n                  <Row>\n                    \n                    <Button onClick={getSponsorship}>Get Sponsorship</Button>{\" \"}\n                    <span className=\"home--divider\"> | </span>\n                    <Button onClick={beASponsor}>Be a Sponsor</Button>\n                  </Row>\n                </div>\n              </div>\n            </div>\n          </Col>\n          <Col>\n            <div>\n              <Image src={Error} fluid />\n            </div>\n          </Col>\n        </Row>\n\n        {/* <div>\n          <Row>\n            <Col>\n              <h5 className=\"display-6\">Request Sponsorship</h5>\n              <hr style={{ width: \"10rem\" }} />\n              <p className=\"text-left mt-3\">\n                Showcase your unique idea to the world and get sponsorship upto\n                1 million Algorand with ease. The journey to fulfil your dreams\n                starts here\n              </p>\n              <Button onClick={getSponsorship}>Get Sponsorship</Button>{\" \"}\n\n            </Col>\n            <Col>\n              <h5 className=\"display-6\">Be a Sponsors</h5>\n              <hr style={{ width: \"10rem\" }} />\n              <p className=\"text-left mt-3\">\n                You are here because you want to be a part of something great,\n                something unique and something that will change the world. Don't\n                hesistate, get started now!\n              </p>\n              <Button onClick={beASponsor}>Be a Sponsor</Button>\n\n            </Col>\n          </Row>\n        </div> */}\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n","/home/david/Desktop/SponsorMe/sponsor/src/contracts/build/index.main.mjs",[],{"ruleId":"52","severity":1,"message":"53","line":30,"column":10,"nodeType":"54","messageId":"55","endLine":30,"endColumn":20},{"ruleId":"52","severity":1,"message":"56","line":30,"column":22,"nodeType":"54","messageId":"55","endLine":30,"endColumn":35},{"ruleId":"52","severity":1,"message":"57","line":42,"column":10,"nodeType":"54","messageId":"55","endLine":42,"endColumn":17},{"ruleId":"52","severity":1,"message":"58","line":44,"column":7,"nodeType":"54","messageId":"55","endLine":44,"endColumn":12},{"ruleId":"52","severity":1,"message":"59","line":45,"column":7,"nodeType":"54","messageId":"55","endLine":45,"endColumn":11},{"ruleId":"52","severity":1,"message":"60","line":46,"column":7,"nodeType":"54","messageId":"55","endLine":46,"endColumn":12},{"ruleId":"52","severity":1,"message":"61","line":47,"column":7,"nodeType":"54","messageId":"55","endLine":47,"endColumn":11},{"ruleId":"62","severity":1,"message":"63","line":56,"column":6,"nodeType":"64","endLine":56,"endColumn":8,"suggestions":"65"},{"ruleId":"52","severity":1,"message":"66","line":89,"column":5,"nodeType":"54","messageId":"55","endLine":89,"endColumn":13},{"ruleId":"52","severity":1,"message":"67","line":92,"column":11,"nodeType":"54","messageId":"55","endLine":92,"endColumn":17},{"ruleId":"52","severity":1,"message":"68","line":98,"column":13,"nodeType":"54","messageId":"55","endLine":98,"endColumn":19},{"ruleId":"52","severity":1,"message":"69","line":114,"column":9,"nodeType":"54","messageId":"55","endLine":114,"endColumn":23},{"ruleId":"70","severity":1,"message":"71","line":374,"column":30,"nodeType":"72","endLine":377,"endColumn":23},"no-unused-vars","'sponsorBal' is assigned a value but never used.","Identifier","unusedVar","'setSponsorBal' is assigned a value but never used.","'sponsor' is assigned a value but never used.","'ctcPO' is assigned a value but never used.","'ctcS' is assigned a value but never used.","'accPO' is assigned a value but never used.","'accS' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'initials'. Either include it or remove the dependency array.","ArrayExpression",["73"],"'iBalance' is assigned a value but never used.","'fundIt' is assigned a value but never used.","'faucet' is assigned a value but never used.","'confirmSponsor' is assigned a value but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal",{"desc":"74","fix":"75"},"Update the dependencies array to be: [initials]",{"range":"76","text":"77"},[1761,1763],"[initials]"]